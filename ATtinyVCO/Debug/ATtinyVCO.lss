
ATtinyVCO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001ba  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002aa  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d4  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019b  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000020b  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000063  00000000  00000000  00000ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>

00000014 <__trampolines_end>:
  14:	00 01       	movw	r0, r0
  16:	02 03       	mulsu	r16, r18
  18:	04 05       	cpc	r16, r4
  1a:	06 07       	cpc	r16, r22
  1c:	08 09       	sbc	r16, r8
  1e:	0a 0b       	sbc	r16, r26
  20:	0c 0d       	add	r16, r12
  22:	0e 0f       	add	r16, r30
  24:	10 11       	cpse	r17, r0
  26:	12 13       	cpse	r17, r18
  28:	14 15       	cp	r17, r4
  2a:	16 17       	cp	r17, r22
  2c:	18 19       	sub	r17, r8
  2e:	1a 1b       	sub	r17, r26
  30:	1c 1d       	adc	r17, r12
  32:	1e 1f       	adc	r17, r30
  34:	20 21       	and	r18, r0
  36:	22 23       	and	r18, r18
  38:	24 25       	eor	r18, r4
  3a:	26 27       	eor	r18, r22
  3c:	28 29       	or	r18, r8
  3e:	2a 2b       	or	r18, r26
  40:	2c 2d       	mov	r18, r12
  42:	2e 2f       	mov	r18, r30
  44:	30 31       	cpi	r19, 0x10	; 16
  46:	32 33       	cpi	r19, 0x32	; 50
  48:	34 35       	cpi	r19, 0x54	; 84
  4a:	36 37       	cpi	r19, 0x76	; 118
  4c:	38 39       	cpi	r19, 0x98	; 152
  4e:	3a 3b       	cpi	r19, 0xBA	; 186
  50:	3c 3d       	cpi	r19, 0xDC	; 220
  52:	3e 3f       	cpi	r19, 0xFE	; 254

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e9       	ldi	r28, 0x9F	; 159
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	a0 e6       	ldi	r26, 0x60	; 96
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a4 36       	cpi	r26, 0x64	; 100
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	2a d0       	rcall	.+84     	; 0xc2 <main>
  6e:	69 c0       	rjmp	.+210    	; 0x142 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <setDDSParameter>:
// setDDSParameter()
// parameter: frequency: 生成する周波数の10倍
//
void setDDSParameter(uint16_t frequency)
{
	tuningWord = (int16_t)(((uint32_t)frequency << 16) / SAMPLE_CLOCK / 10);
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	77 27       	eor	r23, r23
  78:	66 27       	eor	r22, r22
  7a:	20 e8       	ldi	r18, 0x80	; 128
  7c:	38 e3       	ldi	r19, 0x38	; 56
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	3d d0       	rcall	.+122    	; 0xfe <__udivmodsi4>
  84:	30 93 63 00 	sts	0x0063, r19
  88:	20 93 62 00 	sts	0x0062, r18
  8c:	08 95       	ret

0000008e <generateSawWave>:
//
uint8_t generateSawWave()
{
	uint8_t index;
	
	phaseAccumlator += tuningWord;
  8e:	80 91 60 00 	lds	r24, 0x0060
  92:	90 91 61 00 	lds	r25, 0x0061
  96:	20 91 62 00 	lds	r18, 0x0062
  9a:	30 91 63 00 	lds	r19, 0x0063
  9e:	82 0f       	add	r24, r18
  a0:	93 1f       	adc	r25, r19
  a2:	90 93 61 00 	sts	0x0061, r25
  a6:	80 93 60 00 	sts	0x0060, r24
	
	// 右へシフト: 16bit -> 6bit(64個)
	index = phaseAccumlator >> 10;
  aa:	e0 91 60 00 	lds	r30, 0x0060
  ae:	f0 91 61 00 	lds	r31, 0x0061
  b2:	ef 2f       	mov	r30, r31
  b4:	ff 27       	eor	r31, r31
  b6:	e6 95       	lsr	r30
  b8:	e6 95       	lsr	r30
	return pgm_read_byte(&sawUpTable[index]);
  ba:	ec 5e       	subi	r30, 0xEC	; 236
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	84 91       	lpm	r24, Z
}
  c0:	08 95       	ret

000000c2 <main>:
	
	//-------------------------------------------------------------------------
	// PORT設定
	//-------------------------------------------------------------------------
	// DDRB = 0;
	DDRB |= (1 << DDB1);	// PB1(OC0B): PWM out
  c2:	b9 9a       	sbi	0x17, 1	; 23
	// Debug用
	//
	DDRB |= (1 << DDB2);	// PB2: output
  c4:	ba 9a       	sbi	0x17, 2	; 23
	// TCCR0A = 0;
	// TCCR0B = 0;
	//-------------------------------------------------------------------------
	// 波形生成モード: WGM0: 1:1:1
	// 高速PWM(モード7)
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  c6:	8f b5       	in	r24, 0x2f	; 47
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	8f bd       	out	0x2f, r24	; 47
	TCCR0B |= (1 << WGM02);
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	83 bf       	out	0x33, r24	; 51
	//-------------------------------------------------------------------------
	// コンペア・アウトプットB: COM0B: 1:0
	// コンペア・マッチでOC0Bクリア、TOPでOC0Bセット
	TCCR0A |= (1 << COM0B1) | (0 << COM0B0);
  d2:	8f b5       	in	r24, 0x2f	; 47
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8f bd       	out	0x2f, r24	; 47
	//-------------------------------------------------------------------------
	// クロック設定: CS0: 0:0:1
	// 分周なし
	TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	83 bf       	out	0x33, r24	; 51
	// TCCR0A = 0b00100011;
	// TCCR0B = 0B00001001;
	
	//-------------------------------------------------------------------------
	// 分解能 6bit(0 .. 63) 
	OCR0A = 64;
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	86 bf       	out	0x36, r24	; 54
	
	for (;;) {
		// Debug用: PB2
		PORTB |= (1 << PORTB2);
  e2:	c2 9a       	sbi	0x18, 2	; 24
		
		cv = getCV();
		setDDSParameter(cv * 10);
  e4:	82 e3       	ldi	r24, 0x32	; 50
  e6:	93 e2       	ldi	r25, 0x23	; 35
  e8:	c4 df       	rcall	.-120    	; 0x72 <setDDSParameter>
		v = generateSawWave();
  ea:	d1 df       	rcall	.-94     	; 0x8e <generateSawWave>
// parameter: value: 設定するDuty(0 .. OCR0A)
//
void setPWMDuty(uint8_t value)
{
	// PWMのデューティー比を設定
	OCR0B = value;
  ec:	89 bd       	out	0x29, r24	; 41
		setDDSParameter(cv * 10);
		v = generateSawWave();
		setPWMDuty(v);
		
		// Debug用: PB2
		PORTB &= ~(1 << PORTB2);
  ee:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x32>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x38>
  fa:	00 00       	nop
  fc:	f2 cf       	rjmp	.-28     	; 0xe2 <main+0x20>

000000fe <__udivmodsi4>:
  fe:	a1 e2       	ldi	r26, 0x21	; 33
 100:	1a 2e       	mov	r1, r26
 102:	aa 1b       	sub	r26, r26
 104:	bb 1b       	sub	r27, r27
 106:	fd 01       	movw	r30, r26
 108:	0d c0       	rjmp	.+26     	; 0x124 <__udivmodsi4_ep>

0000010a <__udivmodsi4_loop>:
 10a:	aa 1f       	adc	r26, r26
 10c:	bb 1f       	adc	r27, r27
 10e:	ee 1f       	adc	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	a2 17       	cp	r26, r18
 114:	b3 07       	cpc	r27, r19
 116:	e4 07       	cpc	r30, r20
 118:	f5 07       	cpc	r31, r21
 11a:	20 f0       	brcs	.+8      	; 0x124 <__udivmodsi4_ep>
 11c:	a2 1b       	sub	r26, r18
 11e:	b3 0b       	sbc	r27, r19
 120:	e4 0b       	sbc	r30, r20
 122:	f5 0b       	sbc	r31, r21

00000124 <__udivmodsi4_ep>:
 124:	66 1f       	adc	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	1a 94       	dec	r1
 12e:	69 f7       	brne	.-38     	; 0x10a <__udivmodsi4_loop>
 130:	60 95       	com	r22
 132:	70 95       	com	r23
 134:	80 95       	com	r24
 136:	90 95       	com	r25
 138:	9b 01       	movw	r18, r22
 13a:	ac 01       	movw	r20, r24
 13c:	bd 01       	movw	r22, r26
 13e:	cf 01       	movw	r24, r30
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
